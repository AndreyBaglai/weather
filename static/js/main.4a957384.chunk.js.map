{"version":3,"sources":["components/Form/styles.module.scss","components/Header/styles.module.scss","containers/App/styles.module.scss","components/Card/styles.module.scss","components/SelectLanguage/styles.module.scss","components/Loader/styles.module.scss","components/Main/styles.module.scss","stores/Language.ts","stores/Cards.ts","stores/Loader.ts","stores/index.ts","services/weather-api.ts","utils/const.ts","services/localStorage.ts","sources/icons/graphic.svg","components/Form/index.tsx","components/SelectLanguage/index.tsx","components/Header/index.tsx","components/Loader/index.tsx","components/Card/index.tsx","components/Main/index.tsx","shared/convert-temperature.ts","containers/App/index.tsx","config/i18n.ts","index.tsx"],"names":["module","exports","makeObservable","this","observable","action","newLang","lang","card","isRepeatCard","cards","unshift","some","item","city","toLowerCase","description","id","find","filter","newTemperature","map","temperature","isLoading","RootStore","languageStore","cardsStore","loaderStore","rootStore","StoreContext","createContext","useStore","store","useContext","Error","getWeatherByCity","fetch","process","then","res","status","json","data","COLLECTION_CARDS","CURRENT_LANG","getCardsFromLS","localStorage","getItem","JSON","parse","setCardsToLS","setItem","stringify","removeCardFromLS","length","updateCardByIdInLS","getLangFromLS","setLangToLS","_path","Form","useState","isNotFound","setIsNotFound","isRepeatCity","setIsRepeatCity","t","useTranslation","useForm","register","handleSubmit","reset","formState","errors","isSubmitSuccessful","useEffect","onSubmitForm","a","response","setTimeout","uniqId","name","time","dt","country","sys","main","temp","humidity","pressure","feels","feels_like","icon","weather","text_icon","wind_speed","wind","speed","isCelsius","addCard","console","log","className","styles","form","onSubmit","type","cityField","placeholder","pattern","value","message","error","addBtn","langs","en","nativeName","ru","uk","he","SelectLanguage","observer","i18n","onSelectLang","event","toggleLoader","target","selectedLang","changeLanguage","cityNames","getAllNamesCity","preparedRequests","Promise","resolve","_","all","newCards","updateCards","changeLang","selectLang","onChange","defaultValue","Object","keys","toUpperCase","Header","header","removeAll","onClick","removeAllCards","removeItem","Loader","loader","_excluded","_extends","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgGraphic","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","fill","fillOpacity","d","ForwardRef","formatTime","date","Date","hours","getHours","minutes","getMinutes","formatDate","monthIdx","getMonth","dayIdx","getDay","getDate","shortMonth","day","formatTemperature","isHebrew","roundedTemperature","Math","ceil","abs","Card","onRemoveCard","cardInfo","onChangeInCelsius","onChangeInFahrenheit","String","style","backgroundColor","removeCard","cardTop","countryInfo","weatherIcon","src","alt","textIcon","toLocaleLowerCase","graphic","tempList","redGraphic","blueGraphic","week","cardBottom","temperatureWrapper","mainTemperature","language","metric","classNames","celsius","active","fahrenheit","weatherInfo","Trans","i18nKey","values","Main","currentTarget","dataset","currentCard","getCardById","updateCardTemperature","floor","parentElement","removeCardById","App","currentLang","container","text","use","Backend","LanguageDetector","initReactI18next","init","backend","loadPath","debug","fallbackLng","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.4a957384.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3EBa3\",\"cityField\":\"styles_cityField__X_G8w\",\"error\":\"styles_error__226dO\",\"addBtn\":\"styles_addBtn__2cTns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__bFteW\",\"removeAll\":\"styles_removeAll__7zdrw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1moU1\",\"text\":\"styles_text__2aAIj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"styles_card__etA8J\",\"removeCard\":\"styles_removeCard__3LVBh\",\"countryInfo\":\"styles_countryInfo__1B1uy\",\"country\":\"styles_country__2X5-F\",\"date\":\"styles_date__aDN0P\",\"cardTop\":\"styles_cardTop__PZ0Pr\",\"cardBottom\":\"styles_cardBottom__3gCQ-\",\"weatherIcon\":\"styles_weatherIcon__3o0uX\",\"icon\":\"styles_icon__3t6wJ\",\"redGraphic\":\"styles_redGraphic__2m9K6\",\"blueGraphic\":\"styles_blueGraphic__V2nsd\",\"graphic\":\"styles_graphic__8Ulfe\",\"tempList\":\"styles_tempList__18qBK\",\"week\":\"styles_week__2Wd9T\",\"temperatureWrapper\":\"styles_temperatureWrapper__PepwB\",\"feels\":\"styles_feels__1BbQ3\",\"temperature\":\"styles_temperature__v10fN\",\"metric\":\"styles_metric__2gzdV\",\"celsius\":\"styles_celsius__3uEzB\",\"fahrenheit\":\"styles_fahrenheit__3gzdm\",\"active\":\"styles_active__ywbG_\",\"weatherInfo\":\"styles_weatherInfo__1Rq13\",\"value\":\"styles_value__1498B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectLang\":\"styles_selectLang__ZQ06w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__KW6Vc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__xrIMk\"};","import { action, makeObservable, observable } from 'mobx';\n\nclass Store {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable lang: string = 'en';\n\n  @action\n  changeLang = (newLang: string) => {\n    this.lang = newLang;\n  };\n}\n\nexport default new Store();\n","import { action, makeObservable, observable } from 'mobx';\nimport { CardModel } from '../types/Card';\n\nclass Store {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable cards: CardModel[] = [];\n\n  @action\n  addCard(card: CardModel) {\n    if (this.isRepeatCard(card)) return;\n    this.cards.unshift(card);\n  }\n\n  @action\n  isRepeatCard(card: CardModel) {\n    return this.cards.some((item: CardModel) => {\n      return (\n        item.city.toLowerCase() === card.city.toLowerCase() &&\n        item.description.toLowerCase() === card.description.toLowerCase()\n      );\n    });\n  }\n\n  @action\n  getCardById(id: string) {\n    return this.cards.find((card: CardModel) => card.id === id);\n  }\n\n  @action\n  removeCardById(id: string) {\n    this.cards = this.cards.filter((card: CardModel) => card.id !== id);\n  }\n\n  @action\n  updateCardTemperature(newTemperature: number, id: string) {\n    this.cards = this.cards.map((card: CardModel) => {\n      if (card.id === id) {\n        card.temperature = newTemperature;\n      }\n      return card;\n    });\n  }\n\n  @action\n  getAllNamesCity() {\n    return this.cards.map((card: CardModel) => card.city);\n  }\n  \n  @action\n  updateCards(cards: CardModel[]) {\n    this.cards = [...cards];\n  }\n\n  @action\n  removeAllCards() {\n    this.cards = [];\n  }\n}\n\nexport default new Store();\n","import { action, makeObservable, observable } from 'mobx';\r\n\r\nclass Store {\r\n  constructor() {\r\n    makeObservable(this);\r\n  }\r\n\r\n  @observable isLoading = false;\r\n  \r\n  @action\r\n  toggleLoader = () => this.isLoading = !this.isLoading;\r\n}\r\n\r\nexport default new Store();\r\n","import { createContext, useContext } from 'react';\r\nimport { observable } from 'mobx';\r\n\r\nimport languageStore from './Language';\r\nimport cardsStore from './Cards';\r\nimport loaderStore from './Loader';\r\n\r\nclass RootStore {\r\n  @observable languageStore = languageStore;\r\n  @observable cardsStore = cardsStore;\r\n  @observable loaderStore = loaderStore;\r\n}\r\n\r\nconst rootStore = new RootStore();\r\n\r\nexport const StoreContext = createContext<RootStore>(rootStore);\r\n\r\nexport const useStore = (): RootStore => {\r\n  const store = useContext(StoreContext);\r\n  if (!store) {\r\n    throw new Error('You have forgot to use StoreProvider, shame on you.');\r\n  }\r\n  return store;\r\n};\r\n\r\nexport default new RootStore();","import { NOT_FOUND_CODE } from \"../utils/const\";\n\nexport const getWeatherByCity = (city: string, lang = 'en') => {\n  return fetch(`${process.env.REACT_APP_WEATHER_URL}?q=${city}&units=metric&lang=${lang}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n    .then((res: Response) => {\n      if (res.status === NOT_FOUND_CODE) return;\n      return res.json();\n    })\n    .then((data) => data);\n}\n","export const MONTHS = [\n  'Jun',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const NOT_FOUND_CODE = 404;","import { CardModel } from \"../types/Card\";\n\nconst COLLECTION_CARDS = 'cards';\nconst CURRENT_LANG = 'lang';\n\nexport function getCardsFromLS(): CardModel[] | [] {\n  const cards = localStorage.getItem(COLLECTION_CARDS);\n  if (cards) return JSON.parse(cards);\n  return []\n}\n\nexport function setCardsToLS(cards: CardModel[]): void {\n  localStorage.setItem(COLLECTION_CARDS, JSON.stringify(cards));\n}\n\nexport function removeAllCardsFromLS() {\n  localStorage.removeItem(COLLECTION_CARDS);\n}\n\nexport function removeCardFromLS(id: string) {\n  const cards = getCardsFromLS();\n  if (cards.length) {\n    const updateCards = cards.filter((card: CardModel) => card.id !== id);\n    setCardsToLS(updateCards);\n  }\n}\n\nexport function updateCardByIdInLS(card: CardModel, id: string) {\n  removeCardFromLS(id);\n  const cards = getCardsFromLS();\n  setCardsToLS([card, ...cards]);\n}\n\nexport function getLangFromLS(): string {\n  const lang = localStorage.getItem(CURRENT_LANG);\n  if (lang) return JSON.parse(lang);\n  return '';\n}\n\nexport function setLangToLS(lang: string): void {\n  localStorage.setItem(CURRENT_LANG, JSON.stringify(lang));\n}\n\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGraphic(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1440 320\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#ff715b\",\n    fillOpacity: 1,\n    d: \"M0,288L48,272C96,256,192,224,288,197.3C384,171,480,149,576,165.3C672,181,768,235,864,250.7C960,267,1056,245,1152,250.7C1248,256,1344,288,1392,304L1440,320L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGraphic);\nexport default __webpack_public_path__ + \"static/media/graphic.64059c71.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from 'react';\nimport uniqId from 'uniqid';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'stores';\nimport { CardModel } from 'types/Card';\n\nimport { getWeatherByCity } from 'services/weather-api';\nimport { setCardsToLS } from 'services/localStorage';\n\nimport styles from './styles.module.scss';\n\ninterface IInputs {\n  city: string;\n}\n\nconst Form: React.FC = () => {\n  const [isNotFound, setIsNotFound] = useState(false);\n  const [isRepeatCity, setIsRepeatCity] = useState(false);\n  const { t } = useTranslation();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitSuccessful },\n  } = useForm<IInputs>();\n  const { cardsStore, languageStore } = useStore();\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset({ city: '' });\n    }\n  }, [isSubmitSuccessful, reset]);\n\n  const onSubmitForm = async ({ city }: IInputs) => {\n    try {\n      if (city === '') return;\n\n      const response = await getWeatherByCity(city, languageStore.lang);\n    \n      if (!response) {\n        setIsNotFound(true);\n        setTimeout(() => setIsNotFound(false), 2000);\n      }\n\n      const card: CardModel = {\n        id: uniqId(),\n        city: response.name,\n        time: response.dt,\n        country: response.sys.country,\n        temperature: response.main.temp,\n        humidity: response.main.humidity,\n        pressure: response.main.pressure,\n        feels: response.main.feels_like,\n        icon: response.weather[0].icon,\n        text_icon: response.weather[0].main,\n        description: response.weather[0].description,\n        wind_speed: response.wind.speed,\n        isCelsius: true,\n      };\n\n      if (cardsStore.isRepeatCard(card)) {\n        setTimeout(() => setIsRepeatCity(false), 2000);\n        setIsRepeatCity(true);\n      }\n\n      cardsStore.addCard(card);\n      setCardsToLS(cardsStore.cards);\n    } catch (err) {\n      console.log(`Invalid city name ${err}`);\n    }\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit(onSubmitForm)}>\n      <input\n        type=\"text\"\n        className={styles.cityField}\n        id=\"city\"\n        placeholder={t('placeholder')}\n        {...register('city', {\n          pattern: {\n            value: /^([a-zA-Z\\u0080-\\u024F]+(?:. |-| |'))*[a-zA-Zа-яА-Я\\u0080-\\u024F]*$/,\n            message: t('tooltips.validate'),\n          },\n        })}\n      />\n      {errors.city && <p className={styles.error}>{errors.city.message}</p>}\n      {isNotFound && <p className={styles.error}>{t('tooltips.not_found')}</p>}\n      {isRepeatCity && <p className={styles.error}>{t('tooltips.city_repeat')}</p>}\n      <button className={styles.addBtn} id=\"addBtn\">\n        {t('buttons.add')}\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport uniqId from 'uniqid';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'stores';\n\nimport { CardModel } from 'types/Card';\nimport { ILanguages } from 'types/Languages';\nimport { IResponseWeather } from 'types/ResponseWeather';\n\nimport { getLangFromLS, setCardsToLS, setLangToLS } from 'services/localStorage';\nimport { getWeatherByCity } from 'services/weather-api';\n\nimport styles from './styles.module.scss';\n\nconst langs: ILanguages = {\n  en: { nativeName: 'English' },\n  ru: { nativeName: 'Russian' },\n  uk: { nativeName: 'Ukraine' },\n  he: { nativeName: 'Hebrew' },\n};\n\nconst SelectLanguage: React.FC = observer(() => {\n  const { cardsStore, languageStore, loaderStore } = useStore();\n  const { i18n } = useTranslation();\n\n  const onSelectLang = async (event: React.ChangeEvent) => {\n    loaderStore.toggleLoader();\n    \n    const target = event.target as HTMLOptionElement;\n    const selectedLang = target.value;\n    i18n.changeLanguage(selectedLang);\n\n    const cityNames = cardsStore.getAllNamesCity();\n    \n    const preparedRequests = cityNames.map(\n      (city: string) =>\n        new Promise((resolve, _) => {\n          resolve(getWeatherByCity(city, selectedLang));\n        }),\n    );\n\n    const newCards = await Promise.all(preparedRequests).then((response) =>\n      response.map((item: any) => {\n        const card: CardModel = {\n          id: uniqId(),\n          city: item.name,\n          time: item.dt,\n          country: item.sys.country,\n          temperature: item.main.temp,\n          humidity: item.main.humidity,\n          pressure: item.main.pressure,\n          feels: item.main.feels_like,\n          icon: item.weather[0].icon,\n          text_icon: item.weather[0].main,\n          description: item.weather[0].description,\n          wind_speed: item.wind.speed,\n          isCelsius: true,\n        };\n\n        return card;\n      }),\n    );\n\n    cardsStore.updateCards(newCards);\n    languageStore.changeLang(selectedLang);\n\n    setCardsToLS(newCards);\n    setLangToLS(selectedLang);\n\n    setTimeout(() => {\n      loaderStore.toggleLoader();\n    }, 1000);\n  };\n\n  return (\n    <select\n      name=\"language\"\n      id=\"lang\"\n      className={styles.selectLang}\n      onChange={onSelectLang}\n      defaultValue={getLangFromLS()}>\n      {Object.keys(langs).map((lang: string) => (\n        <option key={lang} value={lang}>\n          {lang.toUpperCase()}\n        </option>\n      ))}\n    </select>\n  );\n});\n\nexport default SelectLanguage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Form from 'components/Form';\nimport SelectLanguage from 'components/SelectLanguage';\n\nimport { useStore } from 'stores';\nimport { removeAllCardsFromLS } from 'services/localStorage';\n\nimport styles from './styles.module.scss';\n\nconst Header: React.FC = () => {\n  const { cardsStore } = useStore();\n  const { t } = useTranslation();\n\n  const onRemoveAllCards = () => {\n    cardsStore.removeAllCards();\n    removeAllCardsFromLS();\n  }\n  \n  return (\n    <header className={styles.header}>\n      <Form />\n      <button className={styles.removeAll} onClick={onRemoveAllCards}>{t('buttons.remove')}</button>\n      <SelectLanguage />\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport styles from './styles.module.scss';\r\n\r\nconst Loader: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  \r\n  return <h2 className={styles.loader}>{t('loader')}</h2>;\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TFunction, Trans, useTranslation } from 'react-i18next';\n\nimport { CardModel } from 'types/Card';\n\nimport { ReactComponent as GraphicIcon } from 'sources/icons/graphic.svg';\n\nimport styles from './styles.module.scss';\n\ninterface IProps {\n  onChangeInCelsius: (event: React.MouseEvent) => void;\n  onRemoveCard: (event: React.MouseEvent) => void;\n  onChangeInFahrenheit: (event: React.MouseEvent) => void;\n  cardInfo: CardModel;\n}\n\nconst formatTime = () => {\n  const date = new Date();\n  const hours = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n  const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n\n  return `${hours}:${minutes}`;\n};\n\nconst formatDate = (t: TFunction<\"translation\">) => {\n  const time = new Date();\n  const monthIdx = time.getMonth();\n  const dayIdx = time.getDay();\n  const date = time.getDate();\n\n  const shortMonth = t(`months.month_${monthIdx}`);\n  const day = t(`days.day_${dayIdx}`);\n\n  return `${day}, ${date} ${shortMonth},`;\n};\n\nconst formatTemperature = (temperature: number, isHebrew: string) => {\n  const roundedTemperature = Math.ceil(temperature);\n  if (roundedTemperature === 0) return '0';\n\n  if (isHebrew === 'he') {\n    return roundedTemperature > 0 ? `${roundedTemperature}+` : `${Math.abs(roundedTemperature)}-`;\n  } else {\n    return roundedTemperature > 0 ? `+${roundedTemperature}` : `-${roundedTemperature}`;\n  }\n};\n\nconst Card: React.FC<IProps> = ({\n  onRemoveCard,\n  cardInfo,\n  onChangeInCelsius,\n  onChangeInFahrenheit,\n}) => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <div\n      className={styles.card}\n      id={String(cardInfo.id)}\n      style={{ backgroundColor: cardInfo.temperature < 0 ? '#F1F2FF' : '#fff1fe' }}>\n      <button className={styles.removeCard} onClick={onRemoveCard}>\n        X\n      </button>\n\n      <div className={styles.cardTop}>\n        <div className={styles.countryInfo}>\n          <div className={styles.country}>\n            {cardInfo.city}, {cardInfo.country}\n          </div>\n          <div className={styles.date}>\n            {formatDate(t)} {formatTime()}\n          </div>\n        </div>\n        <div className={styles.weatherIcon}>\n          <img\n            className={styles.icon}\n            src={`${process.env.REACT_APP_WEATHER_ICON_URL}${cardInfo.icon}@2x.png`}\n            alt=\"Icon\"\n          />\n          <p className={styles.textIcon}>{t(`weather.descriptions.description_${cardInfo.text_icon.toLocaleLowerCase()}`)}</p>\n        </div>\n      </div>\n\n      <div className={styles.graphic}>\n      <ul className={styles.tempList}>\n          <li>10</li>\n          <li>13</li>\n          <li>16</li>\n          <li>13</li>\n          <li>10</li>\n          <li>10</li>\n          <li>07</li>\n        </ul>\n\n        <GraphicIcon className={cardInfo.temperature > 0 ? styles.redGraphic : styles.blueGraphic}/>\n\n        <ul className={styles.week}>\n          <li>19.04</li>\n          <li>20.04</li>\n          <li>21.04</li>\n          <li>22.04</li>\n          <li>23.04</li>\n          <li>24.04</li>\n          <li>25.04</li>\n        </ul>\n      </div>\n\n      <div className={styles.cardBottom}>\n        <div className={styles.temperatureWrapper}>\n          <div className={styles.mainTemperature}>\n            <span className={styles.temperature}>\n              {formatTemperature(cardInfo.temperature, i18n.language)}\n            </span>\n            <span className={styles.metric}>\n              <span\n                data-id={cardInfo.id}\n                onClick={onChangeInCelsius}\n                className={classNames(styles.celsius, { [styles.active]: cardInfo.isCelsius })}>\n                &deg;C\n              </span>{' '}\n              |{' '}\n              <span\n                data-id={cardInfo.id}\n                onClick={onChangeInFahrenheit}\n                className={classNames(styles.fahrenheit, { [styles.active]: !cardInfo.isCelsius })}>\n                &deg;F\n              </span>\n            </span>\n          </div>\n          <div className={styles.feels}>\n            {t('weather.feels', {\n              value: formatTemperature(Math.ceil(cardInfo.feels), i18n.language),\n            })}\n          </div>\n        </div>\n        <div className={styles.weatherInfo}>\n          <p>{cardInfo.description}</p>\n          <p>\n            <Trans i18nKey=\"weather.wind\" values={{ value: cardInfo.wind_speed }}>\n              Wind <span className={styles.value}>m/s</span>\n            </Trans>\n          </p>\n          <p>\n            <Trans i18nKey=\"weather.humidity\" values={{ value: cardInfo.humidity }}>\n              Humidity <span className={styles.value}>%</span>\n            </Trans>\n          </p>\n          <p>\n            <Trans i18nKey=\"weather.pressure\" values={{ value: cardInfo.pressure }}>\n              Pressure <span className={styles.value}>Pa</span>\n            </Trans>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport Loader from 'components/Loader';\nimport Card from 'components/Card';\n\nimport { useStore } from 'stores';\nimport { CardModel } from 'types/Card';\n\nimport { removeCardFromLS, updateCardByIdInLS } from 'services/localStorage';\nimport { convertToCelsius, convertToFahrenheit } from 'shared/convert-temperature';\n\nimport styles from './styles.module.scss';\n\nconst Main: React.FC = observer(() => {\n  const { loaderStore, cardsStore } = useStore();\n\n  const onChangeInCelsius = ({ currentTarget }: React.MouseEvent) => {\n    const targetElem = currentTarget as HTMLElement;\n    const id = targetElem.dataset.id;\n\n    if (id) {\n      const currentCard: CardModel | undefined = cardsStore.getCardById(id);\n\n      if (currentCard && !currentCard.isCelsius) {\n        currentCard.isCelsius = true;\n        currentCard.temperature = convertToFahrenheit(currentCard.temperature);\n\n        cardsStore.updateCardTemperature(currentCard.temperature, id);\n        updateCardByIdInLS(currentCard, id);\n      }\n    }\n  };\n\n  const onChangeInFahrenheit = ({ currentTarget }: React.MouseEvent) => {\n    const targetElem = currentTarget as HTMLElement;\n    const id = targetElem.dataset.id;\n\n    if (id) {\n      const currentCard: CardModel | undefined = cardsStore.getCardById(id);\n\n      if (currentCard && currentCard.isCelsius) {\n        currentCard.isCelsius = false;\n        currentCard.temperature = convertToCelsius(currentCard.temperature);\n\n        cardsStore.updateCardTemperature(currentCard.temperature, id);\n        updateCardByIdInLS(currentCard, id);\n      }\n    }\n  };\n\n  const onRemoveCard = (event: React.MouseEvent) => {\n    const target = event.target as HTMLElement;\n    const id = target.parentElement?.id;\n\n    if (id) {\n      cardsStore.removeCardById(id);\n      removeCardFromLS(id);\n    }\n  };\n\n  return (\n    <main className={styles.main}>\n      {loaderStore.isLoading ? (\n        <Loader />\n      ) : (\n        cardsStore.cards.map((card: CardModel) => (\n          <Card\n            key={card.id}\n            onChangeInCelsius={onChangeInCelsius}\n            onChangeInFahrenheit={onChangeInFahrenheit}\n            onRemoveCard={onRemoveCard}\n            cardInfo={card}\n          />\n        ))\n      )}\n    </main>\n  );\n});\n\nexport default Main;\n","export const convertToCelsius = (temperature: number) => {\n  return Math.floor(temperature * (9 / 5) + 32);\n};\n\nexport const convertToFahrenheit = (temperature: number) => {\n  return Math.ceil((temperature - 32) * (5 / 9));\n};\n","import React, { useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Header from 'components/Header';\r\nimport Main from 'components/Main';\r\n\r\nimport { useStore } from 'stores';\r\n\r\nimport { getCardsFromLS, getLangFromLS, setLangToLS } from 'services/localStorage';\r\n\r\nimport styles from './styles.module.scss';\r\n\r\nconst App = observer(() => {\r\n  const { cardsStore, languageStore } = useStore();\r\n  const { t } = useTranslation();\r\n  \r\n  useEffect(() => {\r\n    const currentLang = getLangFromLS();\r\n    const currentCards = getCardsFromLS();\r\n\r\n    if (currentCards.length) {\r\n      cardsStore.updateCards(getCardsFromLS());\r\n    }\r\n\r\n    currentLang !== '' ? languageStore.changeLang(currentLang) : setLangToLS(languageStore.lang);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Header />\r\n      {cardsStore.cards.length === 0 ? <h2 className={styles.text}>{t('empty')}</h2> : <Main />}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport Backend from 'i18next-http-backend';\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    backend: {\r\n      loadPath: 'weather/locales/{{lng}}/{{ns}}.json'\r\n    },\r\n    debug: true,\r\n    fallbackLng: 'en',\r\n    interpolation: {\r\n      escapeValue: false, \r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './containers/App';\n\nimport 'config/i18n';\n\nimport 'normalize.css';\nimport 'sources/styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback=\"Loading...\">\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}