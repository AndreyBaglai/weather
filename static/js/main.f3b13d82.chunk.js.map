{"version":3,"sources":["variables/variables.ts","services/weather-api.ts","store/language.ts","store/cards.ts","services/localStorage.ts","components/Form/Form.tsx","store/loader.ts","components/SelectLanguage/SelectLanguage.tsx","components/Header/Header.tsx","components/Loader/Loader.jsx","components/Card/Card.tsx","components/Main/Main.tsx","shared/convert-temperature.ts","App.tsx","index.tsx"],"names":["MONTHS","DAYS","BASE_URL","API_KEY","getWeatherByCity","city","lang","fetch","then","res","status","json","data","changeLang","newLang","makeAutoObservable","this","cards","card","isRepeatCard","unshift","some","item","toLowerCase","description","id","find","filter","newTemperature","map","temperature","COLLECTION_CARDS","CURRENT_LANG","getCardsFromLS","localStorage","getItem","JSON","parse","setCardsToLS","setItem","stringify","removeCardFromLS","length","getLangFromLS","setLangToLS","Form","useForm","register","handleSubmit","reset","formState","errors","isSubmitSuccessful","useEffect","onSubmitForm","a","languageStore","uniqId","name","time","dt","country","sys","main","temp","humidity","pressure","feels","feels_like","icon","weather","text_icon","wind_speed","wind","speed","isCelsius","cardsStore","addCard","totalCards","console","log","className","onSubmit","type","placeholder","pattern","value","message","isLoading","toggleLoader","SelectLanguage","observer","onSelectLang","e","loaderStore","target","selectedLang","cityNames","getAllNamesCity","preparedRequests","Promise","resolve","_","all","response","newCards","updateCards","setTimeout","onChange","defaultValue","Header","onClick","removeAllCards","removeItem","Loader","Card","onChangeTemperature","onRemoveCard","info","String","Date","month","getMonth","day","getDay","date","getDate","formatDate","hours","getHours","minutes","getMinutes","formatTime","src","alt","xmlns","viewBox","fill","fillOpacity","d","roundedTemperature","Math","ceil","formatTemperature","Main","currentTarget","closest","currentCard","getCardById","classList","contains","floor","convertToFahrenheit","updateCardTemperature","updateCardByIdInLS","removeCardById","getStatus","App","currentLang","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3b13d82.chunk.js","sourcesContent":["export const MONTHS = [\n  'Jun',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const NOT_FOUND_CODE = 404;","import { NOT_FOUND_CODE } from \"../variables/variables\";\n\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5/';\nconst API_KEY = '2904218e66790986ea8f1701ca13b7b5';\n\nexport function getWeatherByCity(city: string, lang = 'en') {\n  return fetch(`${BASE_URL}weather?q=${city}&units=metric&lang=${lang}&appid=${API_KEY}`)\n    .then((res: Response) => {\n      if (res.status === NOT_FOUND_CODE) return;\n      return res.json();\n    })\n    .then((data) => data);\n}\n","import { makeAutoObservable } from 'mobx';\n\nclass Language {\n  lang = 'en';\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  changeLang = (newLang: string) => {\n    this.lang = newLang;\n  };\n}\n\nexport default new Language();\n","import { makeAutoObservable } from 'mobx';\nimport { CardModel } from '../model/card-model';\n\nclass Cards {\n  cards: CardModel[] = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get totalCards() {\n    return this.cards;\n  }\n\n  addCard(card: CardModel) {\n    if (this.isRepeatCard(card)) return;\n    this.cards.unshift(card);\n  }\n\n  isRepeatCard(card: CardModel) {\n    return this.cards.some((item: CardModel) => {\n      return (\n        item.city.toLowerCase() === card.city.toLowerCase() &&\n        item.description.toLowerCase() === card.description.toLowerCase()\n      );\n    });\n  }\n\n  getCardById(id: string) {\n    return this.cards.find((card: CardModel) => card.id === id);\n  }\n\n  removeCardById(id: string) {\n    this.cards = this.cards.filter((card: CardModel) => card.id !== id);\n  }\n\n  updateCardTemperature(newTemperature: number, id: string) {\n    this.cards = this.cards.map((card: CardModel) => {\n      if (card.id === id) {\n        card.temperature = newTemperature;\n      }\n      return card;\n    });\n  }\n\n  getAllNamesCity() {\n    return this.cards.map((card: CardModel) => card.city);\n  }\n  \n  updateCards(cards: CardModel[]) {\n    this.cards = [...cards];\n  }\n\n  removeAllCards() {\n    this.cards = [];\n  }\n}\n\nexport default new Cards();\n","import { CardModel } from \"../model/card-model\";\n\nconst COLLECTION_CARDS = 'cards';\nconst CURRENT_LANG = 'lang';\n\nexport function getCardsFromLS(): CardModel[] | [] {\n  const cards = localStorage.getItem(COLLECTION_CARDS);\n  if (cards) return JSON.parse(cards);\n  return []\n}\n\nexport function setCardsToLS(cards: CardModel[]): void {\n  localStorage.setItem(COLLECTION_CARDS, JSON.stringify(cards));\n}\n\nexport function removeAllCardsFromLS() {\n  localStorage.removeItem(COLLECTION_CARDS);\n}\n\nexport function removeCardFromLS(id: string) {\n  const cards = getCardsFromLS();\n  if (cards.length) {\n    const updateCards = cards.filter((card: CardModel) => card.id !== id);\n    setCardsToLS(updateCards);\n  }\n}\n\nexport function updateCardByIdInLS(card: CardModel, id: string) {\n  removeCardFromLS(id);\n  const cards = getCardsFromLS();\n  setCardsToLS([card, ...cards]);\n}\n\nexport function getLangFromLS(): string {\n  const lang = localStorage.getItem(CURRENT_LANG);\n  if (lang) return JSON.parse(lang);\n  return '';\n}\n\nexport function setLangToLS(lang: string): void {\n  localStorage.setItem(CURRENT_LANG, JSON.stringify(lang));\n}\n\n","import React, { useEffect } from 'react';\nimport uniqId from 'uniqid';\nimport { useForm } from 'react-hook-form';\n\nimport { CardModel } from '../../model/card-model';\nimport { getWeatherByCity } from '../../services/weather-api';\nimport languageStore from '../../store/language';\nimport cardsStore from '../../store/cards';\nimport { setCardsToLS } from '../../services/localStorage';\n\nimport './Form.scss';\n\ntype Inputs = {\n  city: string;\n};\n\nconst Form = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitSuccessful },\n  } = useForm<Inputs>();\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset({ city: '' });\n    }\n  }, [isSubmitSuccessful, reset]);\n\n  const onSubmitForm = async ({ city }: Inputs) => {\n    try {\n      if (city === '') return;\n\n      const data = await getWeatherByCity(city, languageStore.lang);\n\n      if (!data) return;\n\n      const card: CardModel = {\n        id: uniqId(),\n        city: data.name,\n        time: data.dt,\n        country: data.sys.country,\n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        pressure: data.main.pressure,\n        feels: data.main.feels_like,\n        icon: data.weather[0].icon,\n        text_icon: data.weather[0].main,\n        description: data.weather[0].description,\n        wind_speed: data.wind.speed,\n        isCelsius: true,\n      };\n\n      cardsStore.addCard(card);\n      setCardsToLS(cardsStore.totalCards);\n    } catch (err: any) {\n      console.log(`Invalid city name ${err}`);\n    }\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit(onSubmitForm)}>\n      <input\n        type=\"text\"\n        className=\"city-field\"\n        id=\"city\"\n        placeholder=\"City name...\"\n        {...register('city', {\n          pattern: {\n            value: /^([a-zA-Z\\u0080-\\u024F]+(?:. |-| |'))*[a-zA-Zа-яА-Я\\u0080-\\u024F]*$/,\n            message: 'Must be only letters',\n          },\n        })}\n      />\n      {errors.city && <p className=\"error\">{errors.city.message}</p>}\n      <button id=\"addBtn\">Add</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import { makeAutoObservable } from 'mobx';\r\n\r\nclass Loader {\r\n  isLoading = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get getStatus() {\r\n    return this.isLoading;\r\n  }\r\n  \r\n  toggleLoader = () => this.isLoading = !this.isLoading;\r\n}\r\n\r\nexport default new Loader();\r\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport uniqId from 'uniqid';\n\nimport { getLangFromLS, setCardsToLS, setLangToLS } from '../../services/localStorage';\nimport languageStore from '../../store/language';\nimport cardsStore from '../../store/cards';\nimport loaderStore from '../../store/loader';\nimport { getWeatherByCity } from '../../services/weather-api';\nimport { CardModel } from '../../model/card-model';\n\nimport './SelectLanguage.scss';\n\nconst SelectLanguage = observer(() => {\n  const onSelectLang = async (e: React.ChangeEvent) => {\n    loaderStore.toggleLoader();\n    const target = e.target as HTMLOptionElement;\n    const selectedLang = target.value;\n    const cityNames = cardsStore.getAllNamesCity();\n    const preparedRequests = cityNames.map(\n      (city: string) =>\n        new Promise((resolve, _) => {\n          resolve(getWeatherByCity(city, selectedLang));\n        }),\n    );\n\n    const newCards = await Promise.all(preparedRequests).then((response) =>\n      response.map((item: any) => {\n        const card: CardModel = {\n          id: uniqId(),\n          city: item.name,\n          time: item.dt,\n          country: item.sys.country,\n          temperature: item.main.temp,\n          humidity: item.main.humidity,\n          pressure: item.main.pressure,\n          feels: item.main.feels_like,\n          icon: item.weather[0].icon,\n          text_icon: item.weather[0].main,\n          description: item.weather[0].description,\n          wind_speed: item.wind.speed,\n          isCelsius: true,\n        };\n\n        return card;\n      }),\n    );\n\n    cardsStore.updateCards(newCards);\n    languageStore.changeLang(selectedLang);\n\n    setCardsToLS(newCards);\n    setLangToLS(selectedLang);\n\n    setTimeout(() => {\n      loaderStore.toggleLoader();\n    }, 1000);\n  };\n\n  return (\n    <select\n      name=\"language\"\n      id=\"lang\"\n      className=\"select-lang\"\n      onChange={onSelectLang}\n      defaultValue={getLangFromLS()}>\n      <option value=\"en\">EN</option>\n      <option value=\"ru\">RU</option>\n      <option value=\"uk\">UA</option>\n    </select>\n  );\n});\n\nexport default SelectLanguage;\n","import React from 'react';\nimport Form from '../Form/Form';\nimport SelectLanguage from '../SelectLanguage/SelectLanguage';\nimport cardsStore from '../../store/cards';\nimport { removeAllCardsFromLS } from '../../services/localStorage';\n\nimport './Header.scss';\n\nexport default function Header() {\n  const onRemoveAllCards = () => {\n    cardsStore.removeAllCards();\n    removeAllCardsFromLS();\n  }\n  \n  return (\n    <header className=\"header\">\n      <Form />\n      <button className=\"remove-all\" onClick={onRemoveAllCards}>Remove all</button>\n      <SelectLanguage />\n    </header>\n  );\n}\n","import React from 'react';\r\n\r\nimport './Loader.scss';\r\n\r\nexport default function Loader() {\r\n  return <h2 className=\"loader\">Loading...</h2>;\r\n}\r\n","import React from 'react';\nimport { CardModel } from '../../model/card-model';\nimport { DAYS, MONTHS } from '../../variables/variables';\n\nimport './Card.scss';\n\ntype CardPropsType = {\n  onChangeTemperature: (e: React.MouseEvent) => void;\n  onRemoveCard: (e: React.MouseEvent) => void;\n  info: CardModel;\n};\n\nexport default function Card({ onChangeTemperature, onRemoveCard, info }: CardPropsType) {\n  const formatTime = () => {\n    const date = new Date();\n    const hours = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n    const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n    return `${hours}:${minutes}`;\n  };\n\n  const formatDate = () => {\n    const time = new Date();\n    const month = time.getMonth();\n    const day = time.getDay();\n    const date = time.getDate();\n\n    return `${DAYS[day]}, ${date} ${MONTHS[month]},`;\n  };\n\n  const formatTemperature = (temperature: number) => {\n    const roundedTemperature = Math.ceil(temperature);\n    if (roundedTemperature === 0) return '0';\n\n    return roundedTemperature > 0\n      ? `+${roundedTemperature}`\n      : `-${roundedTemperature}`;\n  };\n\n  return (\n    <div className=\"card\" id={String(info.id)}>\n      <button className=\"remove-card\" onClick={onRemoveCard}>\n        X\n      </button>\n      <div className=\"card-top\">\n        <div className=\"country-info\">\n          <div className=\"country\">\n            {info.city}, {info.country}\n          </div>\n          <div className=\"date\">\n            {formatDate()} {formatTime()}\n          </div>\n        </div>\n        <div className=\"weather-icon\">\n          <img\n            className=\"icon\"\n            src={`https://openweathermap.org/img/wn/${info.icon}@2x.png`}\n            alt=\"Icon\"\n          />\n          <p className=\"text-icon\">{info.text_icon}</p>\n        </div>\n      </div>\n\n      <div className=\"graphic\">\n        {info.temperature > 0 ? (\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n            <path\n              fill=\"#ff715b\"\n              fillOpacity=\"1\"\n              d=\"M0,288L48,272C96,256,192,224,288,197.3C384,171,480,149,576,165.3C672,181,768,235,864,250.7C960,267,1056,245,1152,250.7C1248,256,1344,288,1392,304L1440,320L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"></path>\n          </svg>\n        ) : (\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n            <path\n              fill=\"#5ba8ff\"\n              fillOpacity=\"1\"\n              d=\"M0,288L48,272C96,256,192,224,288,197.3C384,171,480,149,576,165.3C672,181,768,235,864,250.7C960,267,1056,245,1152,250.7C1248,256,1344,288,1392,304L1440,320L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"></path>\n          </svg>\n        )}\n      </div>\n\n      <div className=\"card-bottom\">\n        <div className=\"temperature-wrapper\" onClick={onChangeTemperature}>\n          <div className=\"main-temperature\">\n            <span className=\"temperature\">{formatTemperature(info.temperature)}</span>\n            <span className=\"metric\">\n              <span className={`celsius ${info.isCelsius ? 'active' : ''}`}>&deg;C</span> |{' '}\n              <span className={`fahrenheit ${!info.isCelsius ? 'active' : ''}`}>&deg;F</span>\n            </span>\n          </div>\n          <div className=\"feels\">\n            Feels like:{' '}\n            {Math.ceil(info.feels) > 0 ? `+${Math.ceil(info.feels)}` : `-${Math.ceil(info.feels)}`}\n          </div>\n        </div>\n        <div className=\"weather-info\">\n          <p>{info.description}</p>\n          <p>\n            Wind: <span className=\"value\">{info.wind_speed}m/s</span>\n          </p>\n          <p>\n            Humidity: <span className=\"value\">{info.humidity}%</span>\n          </p>\n          <p>\n            Pressure: <span className=\"value\">{info.pressure}Pa</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { CardModel } from '../../model/card-model';\nimport Loader from '../Loader/Loader';\nimport Card from '../Card/Card';\nimport cardsStore from '../../store/cards';\nimport loaderStore from '../../store/loader';\nimport { removeCardFromLS, updateCardByIdInLS } from '../../services/localStorage';\nimport { convertToCelsius, convertToFahrenheit } from '../../shared/convert-temperature';\n\nimport './Main.scss';\n\nconst Main = observer(() => {\n  const onChangeTemperature = (e: React.MouseEvent) => {\n    const currentTarget = e.currentTarget as HTMLElement;\n    const target = e.target as HTMLElement;\n\n    const id = String(currentTarget.closest('.card')?.id);\n    const currentCard = cardsStore.getCardById(id);\n\n    if (currentCard) {\n      if (currentCard.isCelsius && target.classList.contains('fahrenheit')) {\n        currentCard.isCelsius = false;\n        currentCard.temperature = convertToCelsius(currentCard.temperature);\n      }\n\n      if (!currentCard.isCelsius && target.classList.contains('celsius')) {\n        currentCard.isCelsius = true;\n        currentCard.temperature = convertToFahrenheit(currentCard.temperature);\n      }\n\n      cardsStore.updateCardTemperature(currentCard.temperature, id);\n      updateCardByIdInLS(currentCard, id);\n    }\n  };\n\n  const onRemoveCard = (e: React.MouseEvent) => {\n    const target = e.target as HTMLElement;\n    const id = target.closest('.card')?.id;\n\n    if (id) {\n      cardsStore.removeCardById(id);\n      removeCardFromLS(id);\n    }\n  };\n\n  return (\n    <main className=\"main\">\n      {loaderStore.getStatus ? (\n        <Loader />\n      ) : (\n        cardsStore.totalCards.map((card: CardModel) => (\n          <Card\n            key={card.id}\n            onChangeTemperature={onChangeTemperature}\n            onRemoveCard={onRemoveCard}\n            info={card}\n          />\n        ))\n      )}\n    </main>\n  );\n});\n\nexport default Main;\n","export function convertToCelsius(temperature: number) {\n  return Math.floor(temperature * (9 / 5) + 33);\n}\n\nexport function convertToFahrenheit(temperature: number) {\n  return Math.ceil((temperature - 32) * (5 / 9));\n}","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport { getCardsFromLS, getLangFromLS, setLangToLS } from './services/localStorage';\n\nimport languageStore from './store/language';\nimport cardsStore from './store/cards';\n\nimport './App.scss';\n\nconst App = observer(() => {\n  useEffect(() => {\n    const currentLang = getLangFromLS();\n    const currentCards = getCardsFromLS();\n\n    if (currentCards.length) {\n      cardsStore.updateCards(getCardsFromLS());\n    }\n\n    currentLang !== '' ? languageStore.changeLang(currentLang) : setLangToLS(languageStore.lang);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <Header />\n      {cardsStore.totalCards.length === 0 ? <p>Please, input city name</p> : <Main />}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}